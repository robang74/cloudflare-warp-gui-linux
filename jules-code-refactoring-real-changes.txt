################################################################################
#
# Cloudflare WARP GUI for linux
#
# (C) 2025, Roberto A. Foglietta <roberto.foglietta@gmail.com> - CC 4.0 SA-ND-NC
#
################################################################################

RATIONALE

I worked as a professional software developer for many years but Python is not one
of those languages that I can claim to master. I use Python in an opportunistic way.

Under this PoV, I was curious to understand how much Jules could help to improve this
little project of mine. Which is also an opportunistic project, something that I would
not do it as a hobby but not for a client or a market use. I was in need of that,
alternatives were not meeting my needs, I developed a best-effort solution for myself.

The best use-case test for Google Jules, working on a code that "just works for me" but
Jules can bring to the next level, something that can go to the market as a product.

APPROACH

> Check the code for potential issues and improvements. Not a code redesign
> just small changes that can provide relevant advantages or fixing bugs.

Then, I let it go its own way with "ok, proceed", despite proposing a more
impactful code refactoring compared with my very modest and practical request.

ANALYSIS

- Moving the non-UI code into an ancillary file, is a good idea in theory but not for
  this project in which having a single file as it would be a binary, is much better.
  Instead, bringing in very basic icons encoded in base64 as fallback would have been
  a more fitting suggestion. However, I was not expecting Jules would have fixed this.

- Stripping `eval()` for security reasons, is a good idea in theory which shows to be
  more of a bias rather than a need. In some cases, `eval()` is very useful and safe.
  For example: `if sn != "DBG" or eval(fn+'.dbg'):` and `func = eval(func_name(1))`.

- Replacing `getoutput` with `subprocess.run`, theory and bias again. In fact, the use
  of subprocess.run increases complication in the code and fall back in `getoutput` to
  be able to work. Moreover, `warp-cli` command needs the user environment, in part.
  The overall result achieved is that the software fails pathetically and fixing it,
  is not straightforward because it means make `subprocess.run` works as `getoutput`,
  in almost all the ways in which the two differ. Therefore, it is a non-sense.
  Finally, error handling is not even taken into consideration here because the correct
  approach would be using a sort of API and not spawning a command line executable.

- It removes some code, which shows to be useful instead. Moreover, it removes a few
  lines of code that were not in use. Which was its first suggestion without the
  need to proceed with the whole plan. I did not catch the hint because it was my 1st time.
  The bugfix reported into the git commit comment is removing `self._event = Event()`.

- Most of the lines changed in the installation scripts received the "string" quoting
  as their only modification. Package checking/missing got broken, and copying as well.
  Moreover, some useful code has been removed (e.g. basic user environment sanity checks).
  The overall result was an install.sh which fails to do its work, completely.

CONCLUSIONS

- Probably, it fixed a bug but I cannot say for sure. It removed dead code, and allowed
  me to get aware about the good choice I made about `getoutput()` and `eval()` usage,
  finally I decided to group together all the `import` pragmas at the top of the file.

- Overall, a waste of time. I will try again because no tool gives its best the 1st time.

UPDATE

- The 2nd try went much better because the prompt was much longer, explaining details,
  constraints, requisites and with a narrow focus on a specific task instead of being
  vague in goals and completely free-hands in execution. You may call it micro-management,
  or a well-defined task in a SCRUM log, and the second is more fitting.

- The task was accomplished and the code provided seems working. One regression has been
  introduced but easy to catch and revert. Despite starting from an older code base the
  integration was much easier and two more things have been learned about Python.

********************************************************************************
*** Google Jules Code Refactoring Claims: **************************************

This commit introduces a number of improvements to the Cloudflare WARP GUI application.
The main changes are:

- Refactoring: The main application file, `warp-gui/warp-gui.py`, has been refactored 
  to separate the UI code from the application logic. The non-UI code has been moved 
  to a new file, `warp-gui/actions.py`.

- Security: The use of `eval()` has been removed from the code to reduce security risks.
  The `getoutput` function has been replaced with `subprocess.run` for better security
  and error handling.

- Bug Fixes: A syntax error in the `UpdateThread` class that could have caused
  the application to crash has been fixed.

- Installation: The `install.sh` script has been improved to provide more robust
  dependency checking and to use a `requirements.txt` file for Python modules.

********************************************************************************
*** warp-gui/warp-gui.py diff **************************************************

gitshell> ff v0.8.9 warp-gui/warp-gui.py | grep -ve "= getoutput" -e "= cmdoutput" |\
    grep --color=none -e "^[+-]" | tee jules-code-refactoring-real-changes.txt

--- a/warp-gui/warp-gui.py
+++ b/warp-gui/warp-gui.py
+# (C) 2025, Roberto A. Foglietta <roberto.foglietta@gmail.com> - GPLv2
+
-from time import sleep
-from subprocess import getoutput
+from time import process_time_ns, monotonic, sleep
+from socket import getaddrinfo, AF_INET, AF_INET6
+from random import randrange, seed
+from ipinfo import getHandler
+from functools import partial
+from sys import _getframe
+
+################################################################################
+path_bin = "/bin:/usr/bin:/usr/local/bin"
-from sys import _getframe
+''' OLDER IMPLEMENTATION EQUIVALENT, FOR DEBUG
+'''
+from subprocess import getoutput
+def cmdoutput(cmd):
+    return getoutput(cmd)
+
+# TODO: user enviroment is determing for D-BUS et all.
+''' NEWER IMPLEMENTATION EQUIVALENT, FOR DEFAULT
+from subprocess import run as cmdrun
+def cmdoutput(cmd):
+    proc = cmdrun(cmd, shell=True, capture_output=True, text=True,
+        env={"PATH": path_bin}, encoding='utf-8')
+    print(proc.stderr)
+    combined_output = proc.stdout + proc.stderr
+    lines = combined_output.splitlines()
+    non_blank_lines = [line for line in lines if line.strip()]
+    clean_output = '\n'.join(non_blank_lines)
+    return clean_output
+'''
+
-from socket import getaddrinfo, AF_INET, AF_INET6
-
-    return getoutput("warp-cli --version")
+    return cmdoutput("warp-cli --version")
-from random import randrange, seed
-from ipinfo import getHandler
-from time import process_time_ns, monotonic
-
-from tkinter import simpledialog
-
-    getoutput("warp-cli dns families " + filter)
-    getoutput("warp-cli mode " + mode)
-from functools import partial
-
+
+
+tmicon = Label(root, text = "tmlogo", image=tmlogo)
+tmicon.image = tmlogo # This creates a persistent reference
+cficon = Label(root, text = "cflogo", image=cflogo)
+cficon.image = cflogo # This creates a persistent reference
-
-        self._event = Event()
-    def freeze(self):
-        pause(self)
-        root._event.clear()
-
-    def unfreeze(self):
-        root._event.set()
-        resume(self)
-
-gui_version_str = "GUI v0.8.9"
+gui_version_str = "GUI v0.9.0"

